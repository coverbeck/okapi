#!/usr/bin/env node
/* global require */
/* global process */

/*
 Copyright 2016 Oscar Ponce BaÃ±uelos

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

'use strict';

const path = require('path');
const cli = require('../src/cli');
const okapi = require('../src/okapi');
const rx = require('rxjs');
const args = process.argv;
const cReader = require('../src/conf/reader');

const processConf = conf => {
    // Clean
    if ( cli.has(args, '-c') || cli.has(args, '--clean')) {
        const fldrName = conf.buildPath;
        return okapi.clean(path.resolve(process.cwd(), fldrName))
            .map(x => `Folder ${fldrName} has been deleted.`);
    }
    // Build
    if ( cli.has(args, '-b') || cli.has(args, '--build')) {
        const source = conf.sourcePath;
        const dest = `${conf.buildPath}/${conf.name}.zip`;
        const type = conf.bundleType;
        return okapi.clean(path.resolve(process.cwd(), conf.buildPath))
            .catch(oe => rx.Observable.of('error'))
            .flatMap(x => okapi.build(source, dest, type))
            .map(x => `Bundle has been generated at ${dest}`);
    }
    // Upload
    if ( cli.has(args, '-l') || cli.has(args, '--upload')) {
        const source = conf.sourcePath;
        const type = conf.bundleType;
        const name = conf.name;
        const org = cli.get(args, '-o') || conf.defaultOrg;
        return okapi.upload(conf.server.port)(source, type, org, name)
            .map(n => `Bundle has been Uploaded at revision ${n}`);
    }
    // Deploy type, org, env, name, revision
    if ( cli.has(args, '-d') || cli.has(args, '--deploy')) {
        const type = conf.bundleType;
        const name = conf.name;
        const r = cli.get(args, '-d') || cli.get(args, '-deploy');
        const org = cli.get(args, '-o') || conf.defaultOrg;
        const env = cli.get(args, '-e') || conf.defaultEnvironment;
        return okapi.deploy(conf.server.port)(type, org, env, name, r)
            .map(x => `Revision ${r} has been deployed.`)
            .catch(error => rx.Observable.of(`An Error occurred: ${error.message}`));
    }
    // Help
    if ( cli.has(args, '-h') || cli.has(args, '--help')) {
        console.log([
            'usage: okapi [options]',
            '',
            'options:',
            '  --conf              Path to configuration file',
            '  -c --clean          Clean the build folder',
            '  -b --build          Build package with Webpack',
            '  -l --upload         Uploads a revision',
            '  -d --deploy         Deploys a revision',
            '  --start             Starts the Okapi server. You\'ll need it if you want to use Apigee APIs',
            '  --stop              Stops the Okapi server',
            '  --status            Returns the status of the Okapi server',
            '  --auth              Authenticate to the Okapi server',
            '  -h --help           Print this list and exit'
        ].join('\n'));
        return rx.Observable.of('Help');
    }
    // Server Status
    if (cli.has(args, '--status')) { return okapi.status(conf.server.port); }
    // Start Sever
    if (cli.has(args, '--start')) { return okapi.start(conf.server); }
    // Stop Server
    if (cli.has(args, '--stop')) { return okapi.stop(conf.server.port); }
    // Auth Server
    if (cli.has(args, '--auth')) {
        const auth = okapi.authenticate(conf.server.port);
        const u = cli.get(args, '-u');
        const p = cli.get(args, '-p');
        const m = cli.get(args, '-m');
        if(!u || !p) {
            console.log('usage: okapi -u <user> -p <password> [-m <mfa>]');
            return rx.Observable.of('Auth Usage');
        }
        return auth(u, p, m);
    }
};

// Load configuration
cReader(args)
    .flatMap(conf => processConf(conf))
    .subscribe(
        message => { cli.log(message); },
        error => {
            if (error.code === 'ENOENT') {
                cli.log('Missing configuration file. Create a new file named "okapi.json" at your project root or use conf option: okapi --conf <path to configuration>');
            } else {
                throw error;
            }

        }
    );
