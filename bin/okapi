#!/usr/bin/env node
/* global require */
/* global process */
'use strict';

const path = require('path');
const fs = require('../src/fsrx');
const cli = require('../src/cli');
const okapi = require('../src/okapi');
const rx = require('rxjs');
const args = process.argv;
const pwd = process.cwd();

// Help
if ( cli.has(args, '-h') || cli.has(args, '--help')) {
    console.log([
        'usage: okapi [options]',
        '',
        'options:',
        '  --conf              Path to configuration file',
        '  -c --clean          Clean the build folder',
        '  -b --build          Build package with Webpack',
        '  -h --help           Print this list and exit.'
    ].join('\n'));
    process.exit();
}

const processConf = conf => {
    // Clean
    if ( cli.has(args, '-c') || cli.has(args, '--clean')) {
        const fldrName = conf.buildPath;
        return okapi.clean(path.resolve(process.cwd(), fldrName))
            .map(x => `Folder ${fldrName} has been deleted.`);
    }
    // Build
    if ( cli.has(args, '-b') || cli.has(args, '--build')) {
        const source = conf.sourcePath;
        const dest = `${conf.buildPath}/${conf.name}.zip`;
        const type = conf.bundleType;
        return okapi.clean(path.resolve(process.cwd(), conf.buildPath))
            .catch(oe => rx.Observable.of('error'))
            .flatMap(x => okapi.build(source, dest, type))
            .map(x => `Bundle has been generated at ${dest}`);
    }
};

// Load configuration
rx.Observable
    .of('./okapi.json')
    .map(p => {
        if (cli.has(args, '--conf')) {
            return cli.get(args, '--conf');
        }
        return p;
    })
    .map(p => path.resolve(pwd, p))
    .flatMap(path => fs.readFile(path, 'utf8'))
    .map(s => {
        const conf = JSON.parse(s);
        conf.buildPath = conf.buildPath || './build';
        conf.sourcePath = conf.sourcePath || './src';
        conf.bundleType = conf.bundleType || 'apiproxy';
        conf.name = conf.name || 'apiproxy';
        return conf;
    })
    .flatMap(conf => processConf(conf))
    .subscribe(
        message => { cli.log(message); },
        error => {
            if (error.code === 'ENOENT') {
                cli.log('Missing configuration file. Create a new file named "okapi.json" at your project root or use conf option: okapi --conf <path to configuration>');
            } else {
                throw error;
            }

        }
    );
