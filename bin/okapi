#!/usr/bin/env node
/* global require */
/* global process */
'use strict';

const path = require('path');
const cli = require('../src/cli');
const okapi = require('../src/okapi');
const rx = require('rxjs');
const args = process.argv;
const cReader = require('../src/conf/reader');

const processConf = conf => {
    // Clean
    if ( cli.has(args, '-c') || cli.has(args, '--clean')) {
        const fldrName = conf.buildPath;
        return okapi.clean(path.resolve(process.cwd(), fldrName))
            .map(x => `Folder ${fldrName} has been deleted.`);
    }
    // Build
    if ( cli.has(args, '-b') || cli.has(args, '--build')) {
        const source = conf.sourcePath;
        const dest = `${conf.buildPath}/${conf.name}.zip`;
        const type = conf.bundleType;
        return okapi.clean(path.resolve(process.cwd(), conf.buildPath))
            .catch(oe => rx.Observable.of('error'))
            .flatMap(x => okapi.build(source, dest, type))
            .map(x => `Bundle has been generated at ${dest}`);
    }
    // Help
    if ( cli.has(args, '-h') || cli.has(args, '--help')) {
        console.log([
            'usage: okapi [options]',
            '',
            'options:',
            '  --conf              Path to configuration file',
            '  -c --clean          Clean the build folder',
            '  -b --build          Build package with Webpack',
            '  --start             Starts the Okapi server. You\'ll need it if you want to use Apigee APIs',
            '  --stop              Stops the Okapi server',
            '  --status            Returns the status of the Okapi server',
            '  -h --help           Print this list and exit'
        ].join('\n'));
        return rx.Observable.of('Help');
    }
    // Server Status
    if (cli.has(args, '--status')) { return okapi.status(conf.server.port); }
    // Start Sever
    if (cli.has(args, '--start')) { return okapi.start(conf.server); }
    // Stop Server
    if (cli.has(args, '--stop')) { return okapi.stop(conf.server.port); }
};

// Load configuration
cReader(args)
    .flatMap(conf => processConf(conf))
    .subscribe(
        message => { cli.log(message); },
        error => {
            if (error.code === 'ENOENT') {
                cli.log('Missing configuration file. Create a new file named "okapi.json" at your project root or use conf option: okapi --conf <path to configuration>');
            } else {
                throw error;
            }

        }
    );
